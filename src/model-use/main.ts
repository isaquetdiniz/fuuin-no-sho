import { Chroma } from "@langchain/community/vectorstores/chroma";
import { PromptTemplate } from "@langchain/core/prompts";
import { ChatOllama, OllamaEmbeddings } from "@langchain/ollama";
import { config } from "../config";

const userInput = process.argv[2];
if (!userInput || !userInput.length) {
	console.error("‚ùå Por favor, forne√ßa uma pergunta como argumento.");
	process.exit(1);
}

console.log("‚ùì Pergunta original:", userInput);

const run = async () => {
	const llm = new ChatOllama({ model: config.llm.modelName });
	const embeddings = new OllamaEmbeddings({
		model: config.embedding.modelName,
	});

	const vectorStore = await Chroma.fromExistingCollection(embeddings, {
		collectionName: config.vectorStore.collectionName,
	});

	const rewriterPrompt = PromptTemplate.fromTemplate(`
Voc√™ √© um assistente especializado em RPG. Gere at√© 5 varia√ß√µes ou reformula√ß√µes √∫teis para a pergunta abaixo, pensando em formas diferentes que jogadores poderiam fazer a mesma pergunta, usando termos semelhantes ou sin√¥nimos.

Pergunta original:
{input}

Responda com uma lista numerada de reformula√ß√µes, curtas e diretas (em portugu√™s do brasil).
`);

	const reformPrompt = await rewriterPrompt.format({ input: userInput });
	const reformResult = await llm.invoke(reformPrompt);

	const synonymQueries = [userInput];
	const lines = (reformResult.content as string).split("\n");
	for (const line of lines) {
		const match = line.match(/^\d+\.\s*(.*)$/);
		if (match?.[1]) synonymQueries.push(match[1].trim());
	}
	console.log(synonymQueries);

	const resultsMap = new Map();
	for (const q of synonymQueries) {
		const results = await vectorStore.similaritySearchWithScore(q, 4);
		// biome-ignore lint/complexity/noForEach: <explanation>
		results.forEach(([doc, score]) => {
			const key = doc.pageContent.slice(0, 100);
			if (!resultsMap.has(key) || resultsMap.get(key).score < score) {
				resultsMap.set(key, { doc, score });
			}
		});
	}

	const topResults = Array.from(resultsMap.values())
		.sort((a, b) => b.score - a.score)
		.slice(0, 4)
		.map((r) => r.doc);

	const context = topResults
		.map(
			(r, i) =>
				`Trecho ${i + 1} (p. ${r.metadata.pageNumber ?? "?"}):\n${r.pageContent}`,
		)
		.join("\n\n");

	const responsePrompt = PromptTemplate.fromTemplate(`
Voc√™ √© um especialista no sistema de RPG chamado \"Naruto: Shinobi no Sho\".

Baseando-se apenas no contexto abaixo, responda √† pergunta do jogador. Use a terminologia correta do sistema.
Se a resposta n√£o estiver clara ou n√£o for poss√≠vel responder com certeza, diga: \"N√£o encontrei essa informa√ß√£o no material.\"

---
üìÑ CONTEXTO:
{context}

‚ùì PERGUNTA:
{question}

üìù RESPOSTA:
`);

	const prompt = await responsePrompt.format({ context, question: userInput });
	console.log("Prompt usado: ", prompt);

	const result = await llm.invoke(prompt);

	if (!result?.content || (result.content as string).trim().length < 5) {
		console.log("‚ö†Ô∏è Resposta insuficiente. Mostrando contexto bruto:");
		console.log("\n\nüìö Trechos relevantes:\n");
		console.log(context);
		return;
	}

	console.log("ü§ñ Resposta:", result.content);
};

run();
